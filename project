#!/usr/bin/env node
var program     = require('commander');
var fs          = require('fs');
var clone       = require('nodegit').Clone.clone;
var handlebars  = require('handlebars');
var path        = require('path');
var Fiber       = require('fibers');
var Future      = require('fibers/future');
var clc         = require('cli-color');
var _           = require('lodash');
var ncp         = require('ncp').ncp;

// helpers
var Logs = {
  'log': function(message){
    console.log(message);
  },
  'info': function(message){
    console.log(clc.green(message));
  },
  'warn': function(message){
    console.log(clc.yellow(message));
  },
  'error': function(message){
    console.log(clc.red(message));
  }
};

function deleteFolderRecursive (path) {
  if( fs.existsSync(path) ) {
    fs.readdirSync(path).forEach(function(file,index){
      var curPath = path + "/" + file;
      if(fs.lstatSync(curPath).isDirectory()) { // recurse
        deleteFolderRecursive(curPath);
      } else { // delete file
        fs.unlinkSync(curPath);
      }
    });
    fs.rmdirSync(path);
  }
};

function getRootPath () {
  return __dirname;
};

function getCurentPath () {
  return fs.realpathSync( process.cwd() );
};

function isMeteorAppDir () {
  var cpath = getCurentPath(),
  appPath = path.resolve(cpath, '.meteor');
  if (!fs.existsSync(appPath))
    throw new Error('not found meteor app');
};

function parseTemplate (data, tmp) {
  var template = handlebars.compile(tmp);
  return template(data);
};

// char => Char 
function capitaliseFirstLetter(string) {
  return string.charAt(0).toUpperCase() + string.slice(1);
};

// commands
program
  .version('0.1.0')

program
  .command('init')
  .description('download project and save locally [stable]')
  .action(function(){
  try {
    var templatePath = path.resolve(getRootPath(), 'template');
    if (fs.existsSync(templatePath)) {
      // delete
      Logs.info('delete folder ...');
      deleteFolderRecursive(templatePath);
    }

    // update
    Logs.info('create folder ...');
    fs.mkdirSync(templatePath, 0777);

    // Clone a given repository into a specific folder.
    Logs.info('clone git ...');
    clone("https://github.com/particle4dev/sample-project.git", templatePath, { ignoreCertErrors: 1 }).then(function (repo) {
      Logs.info('done !');
    }, function (err) {
      throw err;
    })
    .catch(function (err) {
      Logs.error('init: ' + err.message);
    });
  }
  catch(err){
    Logs.error('init: ' + err.message);
  }
});

program
  .command('generate [name]')
  .description('create meteor project [stable]')
  .action(function(name){
    ncp(path.resolve(getRootPath(), 'template', 'project'), path.resolve(getCurentPath(), name), function (err) {
      if (err) {
        return Logs.error(err);
      }
      Logs.info('done !');
    });
});

program
  .command('collection [name] [where]')
  .description('add meteor collection')
  .action(function(name, where){
  try {
    if(!_.isString(name))
      throw new Error('name must be a string');
    if(where != 'client' || where != server)
      where = 'lib';

    // check if path is meteor app
    isMeteorAppDir();
    function getFile (where) {
      return getRootPath() + '/template/collection/' + where + '.tmp';
    }

    // parse
    var file = fs.readFileSync(getFile(where)).toString("utf-8");
    file = parseTemplate({
      collection: capitaliseFirstLetter(name),
      name: name
    }, file);

    // write
    fs.writeFileSync(path.resolve(getCurentPath(), where, 'collections', name + '.js') , file);
  }
  catch(err){
    Logs.error('collection: ' + err.message);
  }
});

program
  .command('page [name]')
  .description('create a new page in client -- incomplete')
  .action(function(name){
  try {
    
  }
  catch(err){
    Logs.error('page: ' + err.message);
  }
});

program
  .command('style [name]')
  .description('create a new style file -- incomplete')
  .action(function(name){
  try {
    
  }
  catch(err){
    Logs.error('style: ' + err.message);
  }
});

program
  .command('create [path] [type]')
  .description('create a new file or a folder (type=folder) with path -- incomplete')
  .action(function(name){
  try {
    
  }
  catch(err){
    Logs.error('create: ' + err.message);
  }
});

program
  .command('packages [name]')
  .description('create meteor packages [stable]')
  .action(function(name){
    ncp(path.resolve(getRootPath(), 'template', 'package'), path.resolve(getCurentPath(), name), function (err) {
      if (err) {
        return Logs.error(err);
      }
      Logs.info('done !');
    });
});

program
  .command('*')
  .action(function(env){
    Logs.info('Enter a Valid command');
    this.outputHelp();
});

program.parse(process.argv);